#!/usr/bin/env dart

import 'dart:io';

/// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–±–æ—Ä–∫–µ
void main(List<String> args) async {
  print('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å git
  final gitStatus = await _checkGitStatus();
  if (gitStatus['hasUncommittedChanges'] == true) {
    print('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ï—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è!');
    print('   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è:');
    print('   git add .');
    print('   git commit -m "–æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"');
    print('   –ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å: make update-version');
    print('');
    print('   –ò–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏? (y/N)');
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    print('   –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏...');
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ git
  final gitInfo = await _getGitInfo();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º pubspec.yaml
  await _updatePubspec(gitInfo);
  
  // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–±–æ—Ä–∫–µ
  await _createBuildInfoFile(gitInfo);
  
  print('‚úÖ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
  print('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–±–æ—Ä–∫–µ:');
  print('   –í–µ—Ä—Å–∏—è: ${gitInfo['version']}');
  print('   –°–±–æ—Ä–∫–∞: ${gitInfo['buildNumber']}');
  print('   –ö–æ–º–º–∏—Ç: ${gitInfo['commitHash']}');
  print('   –î–∞—Ç–∞: ${gitInfo['buildDate']}');
  print('');
  print('üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  print('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: git status');
  print('   2. –î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã: git add lib/utils/build_info_data.dart pubspec.yaml');
  print('   3. –ó–∞–∫–æ–º–º–∏—Ç—å—Ç–µ: git commit -m "chore: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏"');
  print('   4. –°–æ–±–µ—Ä–∏—Ç–µ: make build');
}

/// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å git
Future<Map<String, dynamic>> _checkGitStatus() async {
  try {
    final statusResult = await Process.run('git', ['status', '--porcelain']);
    final hasUncommittedChanges = statusResult.stdout.toString().trim().isNotEmpty;
    
    return {
      'hasUncommittedChanges': hasUncommittedChanges,
      'statusOutput': statusResult.stdout.toString().trim(),
    };
  } catch (e) {
    return {
      'hasUncommittedChanges': false,
      'statusOutput': '',
    };
  }
}

/// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ git
Future<Map<String, String>> _getGitInfo() async {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à –∫–æ–º–º–∏—Ç–∞
    final commitResult = await Process.run('git', ['rev-parse', 'HEAD']);
    final commitHash = commitResult.stdout.toString().trim();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ö–µ—à
    final shortHash = commitHash.length > 7 ? commitHash.substring(0, 7) : commitHash;
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤
    final countResult = await Process.run('git', ['rev-list', '--count', 'HEAD']);
    final buildNumber = countResult.stdout.toString().trim();
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–º–º–∏—Ç–∞
    final dateResult = await Process.run('git', ['log', '-1', '--format=%ci']);
    final commitDate = dateResult.stdout.toString().trim();
    
    // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
    final date = DateTime.parse(commitDate.split(' ')[0]);
    final buildDate = '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–≥–æ–≤
    final tagResult = await Process.run('git', ['describe', '--tags', '--abbrev=0']);
    String version = '1.0.0';
    if (tagResult.exitCode == 0) {
      final tag = tagResult.stdout.toString().trim();
      if (tag.startsWith('v')) {
        version = tag.substring(1);
      } else {
        version = tag;
      }
    }
    
    return {
      'version': version,
      'buildNumber': buildNumber,
      'commitHash': shortHash,
      'buildDate': buildDate,
      'fullCommitHash': commitHash,
    };
  } catch (e) {
    print('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è git –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: $e');
    return {
      'version': '1.0.0',
      'buildNumber': '1',
      'commitHash': 'dev-${DateTime.now().millisecondsSinceEpoch.toString().substring(8)}',
      'buildDate': DateTime.now().toIso8601String().split('T')[0],
      'fullCommitHash': 'dev-${DateTime.now().millisecondsSinceEpoch}',
    };
  }
}

/// –û–±–Ω–æ–≤–∏—Ç—å pubspec.yaml
Future<void> _updatePubspec(Map<String, String> gitInfo) async {
  final pubspecFile = File('pubspec.yaml');
  final content = await pubspecFile.readAsString();
  
  // –ó–∞–º–µ–Ω—è–µ–º –≤–µ—Ä—Å–∏—é
  final newContent = content.replaceAll(
    RegExp(r'version:\s*[\d\.]+\+\d+'),
    'version: ${gitInfo['version']}+${gitInfo['buildNumber']}',
  );
  
  await pubspecFile.writeAsString(newContent);
  print('üìù pubspec.yaml –æ–±–Ω–æ–≤–ª–µ–Ω');
}

/// –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–±–æ—Ä–∫–µ
Future<void> _createBuildInfoFile(Map<String, String> gitInfo) async {
  final buildInfoFile = File('lib/utils/build_info_data.dart');
  
  final content = '''
// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–±–æ—Ä–∫–µ
// –ù–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é!

class BuildInfoData {
  static const String version = '${gitInfo['version']}';
  static const String buildNumber = '${gitInfo['buildNumber']}';
  static const String commitHash = '${gitInfo['commitHash']}';
  static const String buildDate = '${gitInfo['buildDate']}';
  static const String fullCommitHash = '${gitInfo['fullCommitHash']}';
}
''';
  
  await buildInfoFile.writeAsString(content);
  print('üìÑ build_info_data.dart —Å–æ–∑–¥–∞–Ω');
}
