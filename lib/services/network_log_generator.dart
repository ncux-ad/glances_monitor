import 'dart:io';
import '../models/server_config.dart';

class NetworkLogGenerator {
  static String generateNetworkDiagnosticLog({
    required Map<String, dynamic> diagnosticData,
    required ServerConfig server,
    String? additionalNotes,
  }) {
    final timestamp = DateTime.now().toIso8601String();
    final log = StringBuffer();
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    log.writeln('=' * 80);
    log.writeln('–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ï–¢–ò GLANCES MONITOR');
    log.writeln('=' * 80);
    log.writeln();
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏
    log.writeln('üìÖ –í—Ä–µ–º—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: $timestamp');
    log.writeln('üñ•Ô∏è  –°–µ—Ä–≤–µ—Ä: ${server.name} (${server.url})');
    log.writeln('üîß –í–µ—Ä—Å–∏—è API: ${diagnosticData['api_version'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}');
    log.writeln();
    
    // –°–≤–æ–¥–∫–∞
    final interfaces = diagnosticData['interfaces'] as List<dynamic>? ?? [];
    final issues = diagnosticData['issues'] as List<dynamic>? ?? [];
    final recommendations = diagnosticData['recommendations'] as List<dynamic>? ?? [];
    
    log.writeln('üìä –°–í–û–î–ö–ê:');
    log.writeln('   ‚Ä¢ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${interfaces.length}');
    log.writeln('   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: ${issues.length}');
    log.writeln('   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: ${recommendations.length}');
    log.writeln();
    
    // –ü—Ä–æ–±–ª–µ–º—ã
    if (issues.isNotEmpty) {
      log.writeln('‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:');
      for (int i = 0; i < issues.length; i++) {
        log.writeln('   ${i + 1}. ${issues[i]}');
      }
      log.writeln();
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (recommendations.isNotEmpty) {
      log.writeln('üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
      for (int i = 0; i < recommendations.length; i++) {
        log.writeln('   ${i + 1}. ${recommendations[i]}');
      }
      log.writeln();
    }
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º
    if (interfaces.isNotEmpty) {
      log.writeln('üåê –°–ï–¢–ï–í–´–ï –ò–ù–¢–ï–†–§–ï–ô–°–´:');
      log.writeln('-' * 40);
      
      for (final iface in interfaces) {
        final name = iface['name'] as String? ?? 'unknown';
        final isUp = iface['is_up'] as bool? ?? false;
        final cumulativeRx = iface['cumulative_rx'] as num? ?? 0;
        final cumulativeTx = iface['cumulative_tx'] as num? ?? 0;
        final rxPerSec = iface['rx_bytes_per_sec'] as num? ?? 0;
        final txPerSec = iface['tx_bytes_per_sec'] as num? ?? 0;
        
        log.writeln('–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: $name');
        log.writeln('   –°—Ç–∞—Ç—É—Å: ${isUp ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"}');
        log.writeln('   –ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π RX: ${_formatBytes(cumulativeRx)}');
        log.writeln('   –ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π TX: ${_formatBytes(cumulativeTx)}');
        log.writeln('   –°–∫–æ—Ä–æ—Å—Ç—å RX: ${_formatBytes(rxPerSec)}/—Å–µ–∫');
        log.writeln('   –°–∫–æ—Ä–æ—Å—Ç—å TX: ${_formatBytes(txPerSec)}/—Å–µ–∫');
        log.writeln();
      }
    }
    
    // –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (diagnosticData['raw_network_data'] != null) {
      log.writeln('üîç –°–´–†–´–ï –î–ê–ù–ù–´–ï:');
      log.writeln('-' * 40);
      log.writeln(diagnosticData['raw_network_data'].toString());
      log.writeln();
    }
    
    // –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    log.writeln('üíª –°–ò–°–¢–ï–ú–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:');
    log.writeln('-' * 40);
    log.writeln('–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: ${Platform.operatingSystem}');
    log.writeln('–í–µ—Ä—Å–∏—è: ${Platform.operatingSystemVersion}');
    log.writeln('–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ${Platform.operatingSystemVersion}');
    log.writeln();
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
    if (additionalNotes != null && additionalNotes.isNotEmpty) {
      log.writeln('üìù –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ó–ê–ú–ï–¢–ö–ò:');
      log.writeln('-' * 40);
      log.writeln(additionalNotes);
      log.writeln();
    }
    
    // –ü–æ–¥–ø–∏—Å—å
    log.writeln('=' * 80);
    log.writeln('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ Glances Monitor App');
    log.writeln('–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –ª–æ–≥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º');
    log.writeln('=' * 80);
    
    return log.toString();
  }
  
  static String generateEndpointDiagnosticLog({
    required Map<String, dynamic> diagnosticResults,
    required ServerConfig server,
    String? additionalNotes,
  }) {
    final timestamp = DateTime.now().toIso8601String();
    final log = StringBuffer();
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    log.writeln('=' * 80);
    log.writeln('–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ENDPOINT GLANCES MONITOR');
    log.writeln('=' * 80);
    log.writeln();
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏
    log.writeln('üìÖ –í—Ä–µ–º—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: $timestamp');
    log.writeln('üñ•Ô∏è  –°–µ—Ä–≤–µ—Ä: ${server.name} (${server.url})');
    log.writeln();
    
    // –°–≤–æ–¥–∫–∞ –ø–æ endpoint
    final available = diagnosticResults.values.where((r) => r['is_available'] == true).length;
    final total = diagnosticResults.length;
    final issues = diagnosticResults.values.where((r) => (r['issues'] as List).isNotEmpty).length;
    
    log.writeln('üìä –°–í–û–î–ö–ê –ü–û ENDPOINT:');
    log.writeln('   ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ endpoint: $available –∏–∑ $total');
    log.writeln('   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: $issues');
    log.writeln();
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É endpoint
    log.writeln('üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ü–û ENDPOINT:');
    log.writeln('-' * 60);
    
    for (final entry in diagnosticResults.entries) {
      final endpoint = entry.key;
      final result = entry.value;
      
      final isAvailable = result['is_available'] as bool? ?? false;
      final statusCode = result['status_code'] as int?;
      final responseTime = result['response_time_ms'] as int?;
      final issues = result['issues'] as List<dynamic>? ?? [];
      final recommendations = result['recommendations'] as List<dynamic>? ?? [];
      
      log.writeln('Endpoint: $endpoint');
      log.writeln('   –°—Ç–∞—Ç—É—Å: ${isAvailable ? "–î–æ—Å—Ç—É–ø–µ–Ω" : "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}');
      if (statusCode != null) log.writeln('   HTTP –∫–æ–¥: $statusCode');
      if (responseTime != null) log.writeln('   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTime}ms');
      
      if (issues.isNotEmpty) {
        log.writeln('   –ü—Ä–æ–±–ª–µ–º—ã:');
        for (final issue in issues) {
          log.writeln('     ‚Ä¢ $issue');
        }
      }
      
      if (recommendations.isNotEmpty) {
        log.writeln('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
        for (final rec in recommendations) {
          log.writeln('     ‚Ä¢ $rec');
        }
      }
      
      log.writeln();
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
    if (additionalNotes != null && additionalNotes.isNotEmpty) {
      log.writeln('üìù –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ó–ê–ú–ï–¢–ö–ò:');
      log.writeln('-' * 40);
      log.writeln(additionalNotes);
      log.writeln();
    }
    
    // –ü–æ–¥–ø–∏—Å—å
    log.writeln('=' * 80);
    log.writeln('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ Glances Monitor App');
    log.writeln('–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –ª–æ–≥ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º');
    log.writeln('=' * 80);
    
    return log.toString();
  }
  
  static String _formatBytes(num bytes) {
    if (bytes == 0) return '0 B';
    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
    const k = 1024;
    final i = (bytes / k).floor();
    final clampedIndex = i < sizes.length ? i : sizes.length - 1;
    return '${(bytes / (k * clampedIndex)).toStringAsFixed(1)} ${sizes[clampedIndex]}';
  }
}
