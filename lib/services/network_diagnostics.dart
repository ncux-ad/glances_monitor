import 'dart:convert';
import 'package:dio/dio.dart';
import '../models/server_config.dart';

class NetworkDiagnostics {
  static const int timeoutSeconds = 10;
  late final Dio _dio;

  NetworkDiagnostics() {
    _dio = Dio();
    _dio.options.connectTimeout = Duration(seconds: timeoutSeconds);
    _dio.options.receiveTimeout = Duration(seconds: timeoutSeconds);
  }

  void _setupAuth(ServerConfig server) {
    if (server.username.isNotEmpty && server.password.isNotEmpty) {
      final auth = base64Encode(utf8.encode('${server.username}:${server.password}'));
      _dio.options.headers['Authorization'] = 'Basic $auth';
    } else {
      _dio.options.headers.remove('Authorization');
    }
  }

  Future<Map<String, dynamic>> diagnoseNetwork(ServerConfig server) async {
    final result = <String, dynamic>{
      'timestamp': DateTime.now().toIso8601String(),
      'server': server.url,
      'api_version': null,
      'raw_network_data': null,
      'interfaces': <Map<String, dynamic>>[],
      'issues': <String>[],
      'recommendations': <String>[],
    };

    try {
      _setupAuth(server);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é API
      int apiVersion = 4;
      try {
        await _dio.get('${server.url}/api/4/now');
        apiVersion = 4;
      } catch (e) {
        try {
          await _dio.get('${server.url}/api/3/now');
          apiVersion = 3;
        } catch (e) {
          result['issues'].add('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é API (–Ω–∏ v3, –Ω–∏ v4)');
          return result;
        }
      }
      
      result['api_version'] = apiVersion;

      // –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ network endpoint
      final networkResponse = await _dio.get('${server.url}/api/$apiVersion/network');
      result['raw_network_data'] = networkResponse.data;

      if (networkResponse.data is List) {
        final List networkData = networkResponse.data as List;
        
        for (final iface in networkData) {
          if (iface is Map<String, dynamic>) {
            final interfaceInfo = <String, dynamic>{
              'name': iface['interface_name'] ?? 'unknown',
              'is_up': iface['is_up'] ?? false,
              'is_enabled': iface['is_enabled'] ?? false,
              'speed': iface['speed'] ?? 0,
              'cumulative_rx': iface['cumulative_rx'] ?? 0,
              'cumulative_tx': iface['cumulative_tx'] ?? 0,
              'rx': iface['rx'] ?? 0,
              'tx': iface['tx'] ?? 0,
              'rx_bytes_per_sec': iface['rx_bytes_per_sec'] ?? 0,
              'tx_bytes_per_sec': iface['tx_bytes_per_sec'] ?? 0,
              'raw_data': iface,
            };
            
            result['interfaces'].add(interfaceInfo);
            
            // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
            final name = interfaceInfo['name'] as String;
            final isUp = interfaceInfo['is_up'] as bool;
            final cumulativeRx = interfaceInfo['cumulative_rx'] as num;
            final cumulativeTx = interfaceInfo['cumulative_tx'] as num;
            final rxPerSec = interfaceInfo['rx_bytes_per_sec'] as num;
            final txPerSec = interfaceInfo['tx_bytes_per_sec'] as num;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            final rawData = iface;
            final bytesRecv = rawData['bytes_recv'] as num? ?? 0;
            final bytesSent = rawData['bytes_sent'] as num? ?? 0;
            final bytesRecvGauge = rawData['bytes_recv_gauge'] as num? ?? 0;
            final bytesSentGauge = rawData['bytes_sent_gauge'] as num? ?? 0;
            final hasRawActivity = bytesRecv > 0 || bytesSent > 0 || bytesRecvGauge > 0 || bytesSentGauge > 0;
            
            if (!isUp && !hasRawActivity) {
              result['issues'].add('–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å $name –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω (is_up: false)');
            } else if (!isUp && hasRawActivity) {
              result['issues'].add('–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å $name: –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –≤ Glances, –Ω–æ –µ—Å—Ç—å —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏)');
            }
            
            if (cumulativeRx == 0 && cumulativeTx == 0 && !hasRawActivity) {
              result['issues'].add('–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å $name: –Ω—É–ª–µ–≤–∞—è –∫—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
            } else if (cumulativeRx == 0 && cumulativeTx == 0 && hasRawActivity) {
              result['issues'].add('–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å $name: –Ω—É–ª–µ–≤–∞—è –∫—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –Ω–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
            }
            
            if (rxPerSec == 0 && txPerSec == 0 && !hasRawActivity) {
              result['issues'].add('–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å $name: –Ω—É–ª–µ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏');
            } else if (rxPerSec == 0 && txPerSec == 0 && hasRawActivity) {
              result['issues'].add('–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å $name: –Ω—É–ª–µ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏, –Ω–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
            }
          }
        }
      } else {
        result['issues'].add('Network endpoint –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
      if (result['issues'].isEmpty) {
        result['recommendations'].add('–°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
      } else {
        final hasRawDataIssues = result['issues'].any((issue) => (issue as String).contains('—Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ'));
        
        if (hasRawDataIssues) {
          result['recommendations'].addAll([
            '‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê –° –ü–†–ê–í–ê–ú–ò: Glances –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤',
            'üîß –†–µ—à–µ–Ω–∏–µ: –ó–∞–ø—É—Å—Ç–∏—Ç–µ Glances —Å –ø—Ä–∞–≤–∞–º–∏ root: sudo glances -w --port 61208',
            'üîß –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è glances –≤ –≥—Ä—É–ø–ø—É netdev: sudo usermod -aG netdev glances',
            'üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ /proc/net/dev: ls -la /proc/net/dev',
            'üîß –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ psutil –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
          ]);
        } else {
          result['recommendations'].addAll([
            '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤: ip link show',
            '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: cat /proc/net/dev',
            '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Glances –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ root –∏–ª–∏ –≤ –≥—Ä—É–ø–ø–µ netdev',
            '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ psutil —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install psutil',
            '–î–ª—è VPS: —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∞–∫—Ç–∏–≤–Ω—ã',
          ]);
        }
      }

    } catch (e) {
      result['issues'].add('–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: $e');
      result['recommendations'].add('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞');
    }

    return result;
  }

  Future<Map<String, dynamic>> testNetworkActivity(ServerConfig server) async {
    final result = <String, dynamic>{
      'timestamp': DateTime.now().toIso8601String(),
      'test_results': <Map<String, dynamic>>[],
    };

    try {
      _setupAuth(server);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–≤–∞–∂–¥—ã —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
      final response1 = await _dio.get('${server.url}/api/4/network');
      await Future.delayed(Duration(seconds: 2));
      final response2 = await _dio.get('${server.url}/api/4/network');
      
      if (response1.data is List && response2.data is List) {
        final List data1 = response1.data as List;
        final List data2 = response2.data as List;
        
        for (int i = 0; i < data1.length && i < data2.length; i++) {
          final iface1 = data1[i] as Map<String, dynamic>;
          final iface2 = data2[i] as Map<String, dynamic>;
          
          final name = iface1['interface_name'] as String? ?? 'unknown';
          final rx1 = (iface1['cumulative_rx'] as num?) ?? 0;
          final tx1 = (iface1['cumulative_tx'] as num?) ?? 0;
          final rx2 = (iface2['cumulative_rx'] as num?) ?? 0;
          final tx2 = (iface2['cumulative_tx'] as num?) ?? 0;
          
          final rxDiff = rx2 - rx1;
          final txDiff = tx2 - tx1;
          
          result['test_results'].add({
            'interface': name,
            'rx_change': rxDiff,
            'tx_change': txDiff,
            'has_activity': rxDiff > 0 || txDiff > 0,
            'data1': iface1,
            'data2': iface2,
          });
        }
      }
    } catch (e) {
      result['error'] = e.toString();
    }

    return result;
  }
}
