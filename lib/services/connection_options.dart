import '../models/server_config.dart';

class ConnectionOptions {
  static const List<Map<String, dynamic>> connectionTypes = [
    {
      'id': 'direct',
      'name': '–ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
      'description': '–ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Glances API',
      'icon': 'üîó',
      'pros': ['–ë—ã—Å—Ç—Ä–æ', '–ü—Ä–æ—Å—Ç–æ', '–ú–∏–Ω–∏–º—É–º –Ω–∞—Å—Ç—Ä–æ–µ–∫'],
      'cons': ['–¢—Ä–µ–±—É–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç', '–ù–µ—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è'],
      'setup': [
        '–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Glances –∑–∞–ø—É—â–µ–Ω: glances -w --port 61208',
        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: curl http://server:61208/api/4/now',
        '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Basic Auth –µ—Å–ª–∏ –Ω—É–∂–Ω–æ: glances -w --port 61208 --username glances --password your_password'
      ]
    },
    {
      'id': 'nginx_proxy',
      'name': 'Nginx Reverse Proxy',
      'description': '–ß–µ—Ä–µ–∑ Nginx —Å Basic Auth',
      'icon': 'üõ°Ô∏è',
      'pros': ['–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', 'SSL/TLS', '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ'],
      'cons': ['–°–ª–æ–∂–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏'],
      'setup': [
        '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Nginx: sudo apt install nginx',
        '–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: /etc/nginx/sites-available/glances',
        '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ Basic Auth: sudo htpasswd -c /etc/nginx/.htpasswd glances',
        '–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Nginx: sudo systemctl restart nginx'
      ]
    },
    {
      'id': 'ssh_tunnel',
      'name': 'SSH –¢—É–Ω–Ω–µ–ª—å',
      'description': 'SSH —Ç—É–Ω–Ω–µ–ª—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
      'icon': 'üîí',
      'pros': ['–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ', '–ù–µ –Ω—É–∂–µ–Ω –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç'],
      'cons': ['–¢—Ä–µ–±—É–µ—Ç SSH –¥–æ—Å—Ç—É–ø', '–°–ª–æ–∂–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞'],
      'setup': [
        '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ SSH –∫–ª—é—á–∏: ssh-keygen -t rsa',
        '–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–ª—é—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä: ssh-copy-id user@server',
        '–°–æ–∑–¥–∞–π—Ç–µ —Ç—É–Ω–Ω–µ–ª—å: ssh -L 61209:localhost:61208 user@server',
        '–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ localhost:61209'
      ]
    },
    {
      'id': 'vpn',
      'name': 'VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
      'description': '–ß–µ—Ä–µ–∑ VPN (WireGuard/OpenVPN)',
      'icon': 'üåê',
      'pros': ['–ü–æ–ª–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–î–æ—Å—Ç—É–ø –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å–µ—Ç–∏'],
      'cons': ['–°–ª–æ–∂–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ VPN', '–¢—Ä–µ–±—É–µ—Ç VPN —Å–µ—Ä–≤–µ—Ä'],
      'setup': [
        '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ VPN —Å–µ—Ä–≤–µ—Ä (WireGuard/OpenVPN)',
        '–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ VPN',
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π IP —Å–µ—Ä–≤–µ—Ä–∞',
        '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ'
      ]
    }
  ];

  static Map<String, dynamic> getConnectionType(String id) {
    return connectionTypes.firstWhere(
      (type) => type['id'] == id,
      orElse: () => connectionTypes.first,
    );
  }

  static List<Map<String, dynamic>> getRecommendedOptions(ServerConfig server) {
    final recommendations = <Map<String, dynamic>>[];
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞
    final hasAuth = server.username.isNotEmpty && server.password.isNotEmpty;
    final isLocalhost = server.host == 'localhost' || server.host == '127.0.0.1';
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (isLocalhost) {
      recommendations.add(getConnectionType('direct'));
    } else if (hasAuth) {
      recommendations.add(getConnectionType('nginx_proxy'));
    } else {
      recommendations.add(getConnectionType('ssh_tunnel'));
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    for (final type in connectionTypes) {
      if (!recommendations.any((rec) => rec['id'] == type['id'])) {
        recommendations.add(type);
      }
    }
    
    return recommendations;
  }

  static String generateNginxConfig(ServerConfig server) {
    return '''
# /etc/nginx/sites-available/glances
server {
    listen ${server.port};
    server_name ${server.host};
    
    # Basic Auth
    auth_basic "Glances API";
    auth_basic_user_file /etc/nginx/.htpasswd;
    
    # CORS headers
    add_header Access-Control-Allow-Origin *;
    add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
    add_header Access-Control-Allow-Headers "Authorization, Content-Type";
    
    location / {
        proxy_pass http://localhost:61209;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        
        # Timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
}
''';
  }

  static String generateSSHCommand(ServerConfig server) {
    return 'ssh -L 61209:localhost:61208 ${server.username}@${server.host}';
  }

  static String generateCurlTest(ServerConfig server) {
    if (server.username.isNotEmpty && server.password.isNotEmpty) {
      return 'curl -u ${server.username}:${server.password} http://${server.host}:${server.port}/api/4/now';
    } else {
      return 'curl http://${server.host}:${server.port}/api/4/now';
    }
  }

  static List<String> getTroubleshootingSteps(ServerConfig server) {
    return [
      '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ Glances –∑–∞–ø—É—â–µ–Ω: ps aux | grep glances',
      '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—Ç: netstat -tlnp | grep ${server.port}',
      '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${generateCurlTest(server)}',
      '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Glances: journalctl -u glances -f',
      '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: sudo -u glances glances --version',
      '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: glances --export json | head -20',
    ];
  }
}
