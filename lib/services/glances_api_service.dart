import 'dart:convert';
import 'package:dio/dio.dart';
import '../models/server_config.dart';
import '../models/system_metrics.dart';

class GlancesApiService {
  static const int timeoutSeconds = 5;
  late final Dio _dio;

  GlancesApiService() {
    _dio = Dio();
    _dio.options.connectTimeout = Duration(seconds: timeoutSeconds);
    _dio.options.receiveTimeout = Duration(seconds: timeoutSeconds);
  }

  Future<SystemMetrics> fetchMetrics(ServerConfig server) async {
    return getServerMetrics(server);
  }

  Future<SystemMetrics> getServerMetrics(ServerConfig server) async {
    try {
      print('üåê –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É: ${server.url}');
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Basic Auth —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã username –∏ password
      if (server.username.isNotEmpty && server.password.isNotEmpty) {
        final auth = base64Encode(utf8.encode('${server.username}:${server.password}'));
        _dio.options.headers['Authorization'] = 'Basic $auth';
        print('üîê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Basic Auth –¥–ª—è ${server.username}');
      } else {
        _dio.options.headers.remove('Authorization');
        print('üîì –ë–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      }

      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ API —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Glances
      print('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API...');
      final responses = await Future.wait([
        _dio.get('${server.url}/api/4/quicklook'),
        _dio.get('${server.url}/api/4/mem'),
        _dio.get('${server.url}/api/4/memswap'),
        _dio.get('${server.url}/api/4/fs'),
        _dio.get('${server.url}/api/4/cpu'),
        _dio.get('${server.url}/api/4/network'),
      ]);
      print('‚úÖ –í—Å–µ API –∑–∞–ø—Ä–æ—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');

      return SystemMetrics.fromGlancesData(
        quicklook: responses[0].data as Map<String, dynamic>,
        memory: responses[1].data as Map<String, dynamic>,
        memswap: responses[2].data as Map<String, dynamic>,
        disk: responses[3].data as List<dynamic>,
        cpu: responses[4].data as Map<String, dynamic>,
        network: responses[5].data as List<dynamic>,
      );
    } on DioException catch (e) {
      print('‚ùå DioException –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ ${server.name}: ${e.message}');
      print('‚ùå –°—Ç–∞—Ç—É—Å –∫–æ–¥: ${e.response?.statusCode}');
      print('‚ùå URL: ${e.requestOptions.uri}');
      return SystemMetrics.offline(errorMessage: e.message);
    } catch (e) {
      print('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ ${server.name}: $e');
      print('‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: ${e.runtimeType}');
      return SystemMetrics.offline(errorMessage: e.toString());
    }
  }

  Future<bool> testConnection(ServerConfig server) async {
    try {
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Basic Auth —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã username –∏ password
      if (server.username.isNotEmpty && server.password.isNotEmpty) {
        final auth = base64Encode(utf8.encode('${server.username}:${server.password}'));
        _dio.options.headers['Authorization'] = 'Basic $auth';
      } else {
        _dio.options.headers.remove('Authorization');
      }
      
      final response = await _dio.get('${server.url}/api/4/now');
      return response.statusCode == 200;
    } on DioException catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${server.name}: ${e.message}');
      return false;
    } catch (e) {
      print('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ${server.name}: $e');
      return false;
    }
  }

  Future<Map<String, dynamic>?> getQuicklook(ServerConfig server) async {
    try {
      final auth = base64Encode(utf8.encode('${server.username}:${server.password}'));
      _dio.options.headers['Authorization'] = 'Basic $auth';
      
      final response = await _dio.get('${server.url}/api/4/quicklook');
      return response.data as Map<String, dynamic>?;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è quicklook –¥–ª—è ${server.name}: $e');
      return null;
    }
  }

  Future<Map<String, dynamic>?> getMemory(ServerConfig server) async {
    try {
      final auth = base64Encode(utf8.encode('${server.username}:${server.password}'));
      _dio.options.headers['Authorization'] = 'Basic $auth';
      
      final response = await _dio.get('${server.url}/api/4/mem');
      return response.data as Map<String, dynamic>?;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è memory –¥–ª—è ${server.name}: $e');
      return null;
    }
  }

  Future<List<dynamic>?> getDisk(ServerConfig server) async {
    try {
      final auth = base64Encode(utf8.encode('${server.username}:${server.password}'));
      _dio.options.headers['Authorization'] = 'Basic $auth';
      
      final response = await _dio.get('${server.url}/api/4/fs');
      return response.data as List<dynamic>?;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è disk –¥–ª—è ${server.name}: $e');
      return null;
    }
  }

  Future<Map<String, dynamic>?> getCpu(ServerConfig server) async {
    try {
      final auth = base64Encode(utf8.encode('${server.username}:${server.password}'));
      _dio.options.headers['Authorization'] = 'Basic $auth';
      
      final response = await _dio.get('${server.url}/api/4/cpu');
      return response.data as Map<String, dynamic>?;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è cpu –¥–ª—è ${server.name}: $e');
      return null;
    }
  }

  Future<List<dynamic>?> getNetwork(ServerConfig server) async {
    try {
      final auth = base64Encode(utf8.encode('${server.username}:${server.password}'));
      _dio.options.headers['Authorization'] = 'Basic $auth';
      
      final response = await _dio.get('${server.url}/api/4/network');
      return response.data as List<dynamic>?;
    } catch (e) {
      print('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è network –¥–ª—è ${server.name}: $e');
      return null;
    }
  }
}

